name: Deploy App Ecommerce
on:
  push:
    branches: [ main ]
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SQS_ADD_TO_CART_QUEUE_URL: ${{ secrets.SQS_ADD_TO_CART_QUEUE_URL }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SQS_REFUND_CART_QUEUE_URL: ${{ secrets.SQS_REFUND_CART_QUEUE_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Build project
        run: mvn clean install
      - name: Generate SSL certificate and private key
        run: |
          openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/cert.key -out /tmp/cert.crt -subj "/CN=mydomain.com"
      - name: Login Docker Hub
        run: docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}}
      - name: Build Docker image
        run: docker build --no-cache -t jpedrorf3003/ecommerce .
      - name: Push image docker
        run: docker push jpedrorf3003/ecommerce
  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Pull image from docker hub
        run: docker pull jpedrorf3003/ecommerce:latest
      - name: Stop and remove existing container
        run: |
          docker stop ecommerce_new
          docker rm ecommerce_new
      - name: Run docker container
        run: docker run -d -p 443:443 -e SQS_ADD_TO_CART_QUEUE_URL=${{ secrets.SQS_ADD_TO_CART_QUEUE_URL }} -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} -e SQS_REFUND_CART_QUEUE_URL=${{ secrets.SQS_REFUND_CART_QUEUE_URL }} --name ecommerce_new -v /tmp/cert.crt:/etc/ssl/certs/cert.crt -v /tmp/cert.key:/etc/ssl/private/cert.key jpedrorf3003/ecommerce





